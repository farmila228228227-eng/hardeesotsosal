import os
import asyncio
import logging
import aiosqlite
from datetime import timedelta, datetime
from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message, ChatPermissions, CallbackQuery, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder

# ================== –ù–ê–°–¢–†–û–ô–ö–ò ==================
BOT_TOKEN = os.getenv("BOT_TOKEN")  # —Ç–æ–∫–µ–Ω –±–µ—Ä—ë–º –∏–∑ Secrets (Replit –∏–ª–∏ GitHub)
OWNER_ID = 7322925570  # —Ç–≤–æ–π id (–æ–≤–Ω–µ—Ä)

DB_PATH = "bot.db"
LOG_FILE = "violations.log"

logging.basicConfig(level=logging.INFO)

# —Å–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ (–Ω–æ–≤—ã–π —Å–ø–æ—Å–æ–± –¥–ª—è aiogram 3.7+)
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# ================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–ê–ó–´ ==================
async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("CREATE TABLE IF NOT EXISTS admins (id INTEGER PRIMARY KEY)")
        await db.execute("CREATE TABLE IF NOT EXISTS bad_words (word TEXT PRIMARY KEY)")
        await db.execute("CREATE TABLE IF NOT EXISTS allowed_links (link TEXT PRIMARY KEY)")
        await db.commit()

# ================== –•–ï–õ–ü–ï–†–´ ==================
async def is_admin(user_id: int) -> bool:
    if user_id == OWNER_ID:
        return True
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT 1 FROM admins WHERE id=?", (user_id,)) as cur:
            return await cur.fetchone() is not None

async def log_violation(text: str):
    with open(LOG_FILE, "a", encoding="utf-8") as f:
        f.write(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] {text}\n")

# ================== –ö–û–ú–ê–ù–î–´ ==================
@dp.message(F.text == "/dante")
async def cmd_help(message: Message):
    text = (
        "<b>üìú –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:</b>\n"
        "/dante ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "/admin ‚Äì –æ—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (—Ç–æ–ª—å–∫–æ –≤ –õ–° –¥–ª—è –æ–≤–Ω–µ—Ä–∞/–∞–¥–º–∏–Ω–æ–≤)\n"
        "–ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ ‚Üí –º—É—Ç –Ω–∞ 10 –º–∏–Ω—É—Ç\n"
        "–ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ ‚Üí –±–∞–Ω\n"
    )
    await message.answer(text)

@dp.message(F.text == "/admin")
async def cmd_admin(message: Message):
    if not await is_admin(message.from_user.id):
        return
    if message.chat.type != "private":
        await message.answer("‚ö†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –õ–° —Å –±–æ—Ç–æ–º.")
        return

    kb = InlineKeyboardBuilder()
    kb.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ", callback_data="add_word")
    kb.button(text="‚ûñ –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ", callback_data="del_word")
    kb.button(text="üìú –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤", callback_data="list_words")
    kb.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data="add_link")
    kb.button(text="‚ûñ –£–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data="del_link")
    kb.button(text="üìú –°–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫", callback_data="list_links")
    kb.button(text="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –ª–æ–≥–∏", callback_data="download_logs")
    kb.button(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏", callback_data="clear_logs")
    kb.adjust(2)

    await message.answer("‚öôÔ∏è <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>", reply_markup=kb.as_markup())

# ================== –ö–ù–û–ü–ö–ò –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–ò ==================
@dp.callback_query(F.data == "list_words")
async def cb_list_words(call: CallbackQuery):
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT word FROM bad_words") as cur:
            words = [row[0] for row in await cur.fetchall()]
    text = "üö´ –ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞:\n" + "\n".join(words) if words else "‚ùå –ù–µ—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤"
    await call.message.answer(text)

@dp.callback_query(F.data == "list_links")
async def cb_list_links(call: CallbackQuery):
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT link FROM allowed_links") as cur:
            links = [row[0] for row in await cur.fetchall()]
    text = "‚úÖ –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏:\n" + "\n".join(links) if links else "‚ùå –ù–µ—Ç —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫"
    await call.message.answer(text)

@dp.callback_query(F.data == "download_logs")
async def cb_download_logs(call: CallbackQuery):
    if os.path.exists(LOG_FILE):
        file = FSInputFile(LOG_FILE)
        await call.message.answer_document(file)
    else:
        await call.message.answer("üìÇ –õ–æ–≥-—Ñ–∞–π–ª –ø—É—Å—Ç")

@dp.callback_query(F.data == "clear_logs")
async def cb_clear_logs(call: CallbackQuery):
    open(LOG_FILE, "w").close()
    await call.message.answer("üßπ –õ–æ–≥–∏ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã")

# ================== –§–ò–õ–¨–¢–† –°–û–û–ë–©–ï–ù–ò–ô ==================
@dp.message(F.text)
async def filter_messages(message: Message):
    if message.chat.type == "private":
        return  # –≤ –õ–° –±–æ—Ç –º–æ–ª—á–∏—Ç

    text = message.text.lower()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT word FROM bad_words") as cur:
            bad_words = [row[0].lower() for row in await cur.fetchall()]

    for word in bad_words:
        if word in text.split():
            await message.delete()
            until_date = datetime.now() + timedelta(minutes=10)
            await bot.restrict_chat_member(
                chat_id=message.chat.id,
                user_id=message.from_user.id,
                permissions=ChatPermissions(can_send_messages=False),
                until_date=until_date
            )
            warn = f'üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{message.from_user.full_name}</b> (id={message.from_user.id}) –Ω–∞–ø–∏—Å–∞–ª –∑–∞–ø—Ä–µ—â—ë–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –∏ –ø–æ–ª—É—á–∏–ª –º—É—Ç –Ω–∞ 10 –º–∏–Ω—É—Ç.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–æ–±–ª—é–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞!'
            await bot.send_message(chat_id=message.chat.id, message_thread_id=message.message_thread_id, text=warn)
            await log_violation(warn)
            return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Å—ã–ª–∫–∏
    if "http://" in text or "https://" in text:
        async with aiosqlite.connect(DB_PATH) as db:
            async with db.execute("SELECT link FROM allowed_links") as cur:
                allowed_links = [row[0].lower() for row in await cur.fetchall()]
        if not any(link in text for link in allowed_links):
            await message.delete()
            await bot.ban_chat_member(message.chat.id, message.from_user.id)
            warn = f'‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{message.from_user.full_name}</b> (id={message.from_user.id}) –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –∏ –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω.'
            await bot.send_message(chat_id=message.chat.id, message_thread_id=message.message_thread_id, text=warn)
            await log_violation(warn)

# ================== –°–¢–ê–†–¢ –ë–û–¢–ê ==================
async def main():
    await init_db()
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
